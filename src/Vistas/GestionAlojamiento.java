package Vistas;

import Entidades.Ciudad;
import java.awt.Dimension;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.Date;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import finalpaqueteturistico56.Conexion;

        
public final class GestionAlojamiento extends javax.swing.JInternalFrame {
 Connection con = Conexion.getConexion();
 //creo el modelo de la tabla y dentro de este, modifico el metodo para que ninguna celda sea editable
 private final DefaultTableModel modelo = new DefaultTableModel(){
   @Override
   public boolean isCellEditable(int fila, int colum){
     return false;      
 }
    };

    public GestionAlojamiento() throws SQLException {
        initComponents();
        QuitarLaBarraTitulo();
        cargarCiudadesJCB();
        cargarCabeceraTabla();
        cargarAlojamientosTabla();
        cambiarAnchoColumnas();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jSalir = new javax.swing.JLabel();
        jBBorrar = new javax.swing.JButton();
        jBGuardar = new javax.swing.JButton();
        jBNuevo = new javax.swing.JButton();
        jBLimpíar = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jCBCiudades = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jTTipo = new javax.swing.JTextField();
        jTServicios = new javax.swing.JTextField();
        jTImporte = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jBfechaEgreso = new javax.swing.JButton();
        jBFechaIngreso = new javax.swing.JButton();
        jCalendar = new com.toedter.calendar.JCalendar();
        jTFechaIngreso = new javax.swing.JTextField();
        jTFechaEgreso = new javax.swing.JTextField();
        jLAyuda = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTAlojamientos = new javax.swing.JTable();
        jBBuscar = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jTIDbuscar = new javax.swing.JTextField();
        jREstado = new javax.swing.JRadioButton();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jTFPrecioMinimo = new javax.swing.JTextField();
        jTFPrecioMaximo = new javax.swing.JTextField();
        jBFiltrarTabla = new javax.swing.JButton();
        jRFiltroEstado = new javax.swing.JRadioButton();
        jLBusquedaAyuda = new javax.swing.JLabel();
        jTCiudadBuscar = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(1000, 1000));

        jPanel1.setBackground(new java.awt.Color(189, 238, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(1000, 1000));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Logo Pequeño.jpg"))); // NOI18N

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        jLabel2.setText("Gestion Alojamiento");

        jSalir.setFont(new java.awt.Font("Dialog", 1, 48)); // NOI18N
        jSalir.setText("X");
        jSalir.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jSalir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSalirMouseClicked(evt);
            }
        });

        jBBorrar.setBackground(new java.awt.Color(255, 255, 255));
        jBBorrar.setText("Borrar");
        jBBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBBorrarActionPerformed(evt);
            }
        });

        jBGuardar.setBackground(new java.awt.Color(255, 255, 255));
        jBGuardar.setText("Guardar");
        jBGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBGuardarActionPerformed(evt);
            }
        });

        jBNuevo.setBackground(new java.awt.Color(255, 255, 255));
        jBNuevo.setText("Nuevo");
        jBNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBNuevoActionPerformed(evt);
            }
        });

        jBLimpíar.setBackground(new java.awt.Color(255, 255, 255));
        jBLimpíar.setText("Limpiar");
        jBLimpíar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBLimpíarActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel3.setText("Tipo Alojamiento:");

        jLabel4.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel4.setText("Servicios:");

        jLabel5.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel5.setText("Importe Diario:");

        jCBCiudades.setBackground(new java.awt.Color(255, 255, 255));

        jLabel6.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel6.setText("Ciudad:");

        jTTipo.setBackground(new java.awt.Color(255, 255, 255));

        jTServicios.setBackground(new java.awt.Color(255, 255, 255));

        jTImporte.setBackground(new java.awt.Color(255, 255, 255));

        jLabel7.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel7.setText("Fecha de Salida:");

        jLabel8.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel8.setText("Fecha de Ingreso:");

        jBfechaEgreso.setBackground(new java.awt.Color(255, 255, 255));
        jBfechaEgreso.setText("Establecer fecha");
        jBfechaEgreso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBfechaEgresoActionPerformed(evt);
            }
        });

        jBFechaIngreso.setBackground(new java.awt.Color(255, 255, 255));
        jBFechaIngreso.setText("Establecer fecha");
        jBFechaIngreso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBFechaIngresoActionPerformed(evt);
            }
        });

        jCalendar.setBackground(new java.awt.Color(255, 255, 255));

        jTFechaIngreso.setEditable(false);
        jTFechaIngreso.setBackground(new java.awt.Color(255, 255, 255));

        jTFechaEgreso.setEditable(false);
        jTFechaEgreso.setBackground(new java.awt.Color(255, 255, 255));

        jLAyuda.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        jLAyuda.setText("?");
        jLAyuda.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLAyudaMouseEntered(evt);
            }
        });

        jTAlojamientos.setBackground(new java.awt.Color(255, 255, 255));
        jTAlojamientos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTAlojamientos);

        jBBuscar.setBackground(new java.awt.Color(255, 255, 255));
        jBBuscar.setText("Buscar");
        jBBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBBuscarActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel9.setText("ID:");

        jTIDbuscar.setBackground(new java.awt.Color(255, 255, 255));

        jREstado.setBackground(new java.awt.Color(255, 255, 255));
        jREstado.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jREstado.setText("Activo/Inactivo");

        jLabel10.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel10.setText("Estado:");

        jLabel11.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel11.setText("Precio maximo:");

        jLabel12.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel12.setText("Precio minimo:");

        jTFPrecioMinimo.setBackground(new java.awt.Color(255, 255, 255));

        jTFPrecioMaximo.setBackground(new java.awt.Color(255, 255, 255));

        jBFiltrarTabla.setBackground(new java.awt.Color(255, 255, 255));
        jBFiltrarTabla.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jBFiltrarTabla.setText("Filtrar tabla");
        jBFiltrarTabla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBFiltrarTablaActionPerformed(evt);
            }
        });

        jRFiltroEstado.setBackground(new java.awt.Color(255, 255, 255));
        jRFiltroEstado.setText("Activo/Inactivo");

        jLBusquedaAyuda.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLBusquedaAyuda.setText("?");
        jLBusquedaAyuda.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLBusquedaAyudaMouseEntered(evt);
            }
        });

        jTCiudadBuscar.setBackground(new java.awt.Color(255, 255, 255));
        jTCiudadBuscar.setText("Ingrese la ciudad a buscar");
        jTCiudadBuscar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTCiudadBuscarMouseClicked(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel13.setText("Ciudad:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSalir)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(180, 180, 180)
                .addComponent(jLabel1)
                .addGap(3, 3, 3))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel9)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 922, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel6)
                                .addComponent(jLabel5)
                                .addComponent(jLabel4)
                                .addComponent(jLabel3))
                            .addGap(37, 37, 37)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jTServicios, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jTImporte, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jCBCiudades, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addComponent(jTIDbuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jBBuscar))
                                        .addComponent(jTTipo, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(18, 18, 18)
                                    .addComponent(jLBusquedaAyuda))))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel8)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addGap(175, 175, 175)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(jPanel1Layout.createSequentialGroup()
                                                    .addComponent(jTFechaEgreso, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(jBfechaEgreso))
                                                .addGroup(jPanel1Layout.createSequentialGroup()
                                                    .addComponent(jTFechaIngreso, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(jBFechaIngreso))))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addComponent(jLabel10)
                                            .addGap(111, 111, 111)
                                            .addComponent(jREstado)))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel7)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jCalendar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(9, 9, 9)))
                            .addComponent(jLAyuda)
                            .addGap(63, 63, 63))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel12)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jTFPrecioMinimo, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jLabel11)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jTFPrecioMaximo, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(29, 29, 29)
                            .addComponent(jRFiltroEstado)
                            .addGap(18, 18, 18)
                            .addComponent(jLabel13)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jTCiudadBuscar)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jBFiltrarTabla)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jBLimpíar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBNuevo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBGuardar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBBorrar)))
                .addContainerGap(41, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jSalir)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jBBuscar)
                            .addComponent(jLabel9)
                            .addComponent(jTIDbuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLBusquedaAyuda))
                        .addGap(30, 30, 30)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jTTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jTServicios, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jTImporte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jCBCiudades, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCalendar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel8)
                                    .addComponent(jBFechaIngreso)
                                    .addComponent(jTFechaIngreso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(30, 30, 30)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel7)
                                    .addComponent(jBfechaEgreso)
                                    .addComponent(jTFechaEgreso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(30, 30, 30)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jREstado)
                                    .addComponent(jLabel10))
                                .addGap(20, 20, 20))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLAyuda)
                        .addGap(203, 203, 203)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jTFPrecioMinimo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(jTFPrecioMaximo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRFiltroEstado)
                    .addComponent(jLabel13)
                    .addComponent(jTCiudadBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBFiltrarTabla, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBBorrar)
                    .addComponent(jBGuardar)
                    .addComponent(jBNuevo)
                    .addComponent(jBLimpíar))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 978, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBBuscarActionPerformed
        //clic en el boton buscar, hace una consulta SQL en base al ID y llena los datos de la interfaz con la consulta
        //para poder editarlos mas facil.  
                 
       PreparedStatement statement = null;
       ResultSet resultado = null;
       //se entra al try siempre y cuando el id no este vacio
       if(jTIDbuscar.getText().isEmpty() == false)
       {  
        try {
             int busq = Integer.parseInt(jTIDbuscar.getText());        
        
            String SQL = "SELECT* FROM alojamiento WHERE idAlojamiento = ?";
             statement = con.prepareStatement(SQL);
            statement.setInt(1, busq);
            resultado = statement.executeQuery();

            while (resultado.next()) {
                //coloco los datos en los campos de texto
                jTTipo.setText(resultado.getString("tipo"));
                jTServicios.setText(resultado.getString("servicio"));
                jTImporte.setText(Integer.toString(resultado.getInt("importeDiario")));
                jTFechaIngreso.setText(resultado.getDate("fechaIn").toString());
                jTFechaEgreso.setText(resultado.getDate("fechaOn").toString());
                jREstado.setSelected(resultado.getBoolean("estado"));
                int idciudad = resultado.getInt("idCiudadDestino");

                DefaultComboBoxModel<Ciudad> model = (DefaultComboBoxModel<Ciudad>) jCBCiudades.getModel();
                //recorro el modelo del jcombobox, y itero sus elementos
                for (int i = 0; i < model.getSize(); i++) {
                    Ciudad item = model.getElementAt(i);
                    //si el id que coloco en el textfield para buscar, concuerda con alguna de las
                    //ciudades en el jcombobox, la coloco como seleccionada.
                    if (item.getIdCiudad() == idciudad) {
                        jCBCiudades.setSelectedItem(item);
                    }
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(rootPane, "Error al realizar la consulta a la base de datos "+e);
        }catch(NumberFormatException e)
        {
            JOptionPane.showMessageDialog(rootPane, "Ingrese un numero entero valido en el campo ID "+e);
        }//luego del try catch, cierro el resulset y el statement
        finally {
        if (resultado != null) {
            try {
                resultado.close();
            } catch (SQLException ex) {
               JOptionPane.showMessageDialog(rootPane, "error al cerrar el resulset "+ex);
            }
        }
        if (statement != null) {
            try {
                statement.close();
            } catch (SQLException ex) {
                 JOptionPane.showMessageDialog(rootPane, "error al cerrar el statement "+ex);
            }
        }
    }  
        
    }else{
         JOptionPane.showMessageDialog(rootPane, "Ingrese un numero entero valido en el campo ID");       
       }     
    }//GEN-LAST:event_jBBuscarActionPerformed

    private void jLAyudaMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLAyudaMouseEntered
        // se coloca el mouse sobre el icono ?
        jLAyuda.setToolTipText("Seleccione una fecha en el calendario y luego haga clic en el boton establecer fecha correspondiente");
    }//GEN-LAST:event_jLAyudaMouseEntered

    private void jBFechaIngresoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBFechaIngresoActionPerformed
        // clic en el primer boton establecer fecha
        //Convierto el date seleccionado del jcalendar a un LocalDate.
        LocalDate fechain = jCalendar.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();

        //convierto en LocalDate a String y lo muestro en el jtextfield que indica la fecha de ingreso
        jTFechaIngreso.setText(fechain.toString());
    }//GEN-LAST:event_jBFechaIngresoActionPerformed

    private void jBfechaEgresoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBfechaEgresoActionPerformed
        // clic en el segundo boton establecer fecha
        //Convierto el date seleccionado del jcalendar a un LocalDate.
        LocalDate fechasa = jCalendar.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();

        //convierto en LocalDate a String y lo muestro en el jtextfield que indica la fecha de salida
        jTFechaEgreso.setText(fechasa.toString());
    }//GEN-LAST:event_jBfechaEgresoActionPerformed

    private void jBLimpíarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBLimpíarActionPerformed
        //Clic en boton limpiar
        jTIDbuscar.setText(null);
        jTTipo.setText(null);
        jTServicios.setText(null);
        jTImporte.setText(null);
        jTFechaIngreso.setText(null);
        jTFechaEgreso.setText(null);
        jCBCiudades.setSelectedItem(null);
        jREstado.setSelected(false);
        jTFPrecioMinimo.setText(null);
        jTFPrecioMaximo.setText(null);
        jTCiudadBuscar.setText("");
    }//GEN-LAST:event_jBLimpíarActionPerformed

    private void jBNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBNuevoActionPerformed
        insertarAlojamiento();
        limpiarTabla();
        cargarAlojamientosTabla();
    }//GEN-LAST:event_jBNuevoActionPerformed

    private void jBGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBGuardarActionPerformed
        // clic en boton guardar para guardar modificacion
        //llama al metodo update y le pasa el estado del booleano.
        updateAlojamiento(jREstado.isSelected());
        limpiarTabla();
        cargarAlojamientosTabla();
    }//GEN-LAST:event_jBGuardarActionPerformed

    private void jBBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBBorrarActionPerformed
        //llama al metodo update y le pasa un false en el booleano
        updateAlojamiento(false);
        limpiarTabla();
        cargarAlojamientosTabla();
    }//GEN-LAST:event_jBBorrarActionPerformed

    private void jSalirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSalirMouseClicked
        // Abrir menu salida
        MenuSalida MS = new MenuSalida();
        //con getDesktopPane tengo acceso al desktopPane desde el jinternalFrame
        getDesktopPane().add(MS);
        MS.setVisible(true);
    }//GEN-LAST:event_jSalirMouseClicked

    private void jBFiltrarTablaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBFiltrarTablaActionPerformed
        // filtra la tabla por precio minimo, precio maximo o ambos
        //Se incluye en el filtro el estado activo e inactivo.
        //4 OPCIONES
        //si coloca un minimo pero no un maximo CONSULTA POR MINIMO.
          // puede consultarse por la ciudad o no.
        //si coloca un maximo (sin o con minimo)se CONSULTA BETWENN .
            //*si coloca un minimo y maximo tambien es un betwenn.
            //puede consultarse por la ciudad o no.
         ResultSet resultado = null;
        PreparedStatement statement = null;
        //la consulta resultado se hara solo una vez, de entre las dos opciones. MIN y BEETWEEN.

        try {
            if (jTFPrecioMaximo.getText().equals("")) {
                //Si no se aclaro precio maximo, es infinito.
                //se hace una consulta solo con el precio minimo. 

                if (jTCiudadBuscar.getText().isEmpty()) {
                    //Si no se escribio la ciudad en el campo de texto, la consulta se realiza sin ciudad.

                    //CONSULTA PRECIO MIN.   
                    String SQLMIN = "SELECT * \n"
                            + "FROM alojamiento JOIN ciudad ON alojamiento.idCiudadDestino = ciudad.idCiudad\n"
                            + "WHERE alojamiento.importeDiario >= ? AND alojamiento.estado = ?";

                    statement = con.prepareStatement(SQLMIN);
                    //si no se indico precio minimo ni maximo, se establece el precio minimo en 0.
                    if (jTFPrecioMinimo.getText().isEmpty()) {
                        statement.setDouble(1, 0.0);
                    } else {
                        //si se indico el precio minimo, establezco el precio minimo de la consulta con el textfield.
                        statement.setDouble(1, Double.parseDouble(jTFPrecioMinimo.getText()));
                    }

                    //establezco el estado activo/inactivo con el radiobuton.
                    statement.setBoolean(2, jRFiltroEstado.isSelected());
                    //se ejecuta la consulta
                    resultado = statement.executeQuery();
                } else {
                    //Si se escribio la ciudad en el campo de texto, la consulta se realiza con ciudad.

                    //CONSULTA PRECIO MIN Y CIUDAD DESTINO.   
                    String SQLMIN = "SELECT * \n"
                            + "FROM alojamiento JOIN ciudad ON alojamiento.idCiudadDestino = ciudad.idCiudad\n"
                            + "WHERE alojamiento.importeDiario >= ? AND alojamiento.estado = ? AND ciudad.nombre = ?";

                    statement = con.prepareStatement(SQLMIN);
                    //si no se indico precio minimo ni maximo, se establece el precio minimo en 0.
                    if (jTFPrecioMinimo.getText().isEmpty()) {
                        statement.setDouble(1, 0.0);
                    } else {
                        //si se indico el precio minimo, establezco el precio minimo de la consulta con el textfield.
                        statement.setDouble(1, Double.parseDouble(jTFPrecioMinimo.getText()));
                    }

                    //establezco el estado activo/inactivo con el radiobuton.
                    statement.setBoolean(2, jRFiltroEstado.isSelected());
                    //establezco la ciudad con el textfield.
                    statement.setString(3, jTCiudadBuscar.getText());
                    //se ejecuta la consulta
                    resultado = statement.executeQuery();
                }
            } else {
                if (jTCiudadBuscar.getText().isEmpty()) { //Si se aclaro el precio maximo, se hace una consulta BEETWEN
                    //si no se aclaro la ciudad se hace una consulta sin ciudad    
                    //CONSULTA BEETWEN
                    String SQL = "SELECT * \n"
                            + "FROM alojamiento JOIN ciudad ON alojamiento.idCiudadDestino = ciudad.idCiudad\n"
                            + "WHERE alojamiento.importeDiario BETWEEN ? AND ? AND alojamiento.estado = ?";
                    statement = con.prepareStatement(SQL);

                    //establezco el statement con el precio minimo y Maximo:
                    if (jTFPrecioMinimo.getText().equals("")) {
                        //si no hay precio minimo, se establece en 0.
                        statement.setDouble(1, 0.0);
                    } else {
                        //si hay precio minimo, se lo toma del textfield.
                        statement.setDouble(1, Double.parseDouble(jTFPrecioMinimo.getText()));
                    }
                    //se establece el precio maximo.
                    statement.setDouble(2, Double.parseDouble(jTFPrecioMaximo.getText()));
                    //establezco el estado activo/inactivo con el radiobuton.
                    statement.setBoolean(3, jRFiltroEstado.isSelected());
                    //se ejecuta la consulta
                    resultado = statement.executeQuery();

                } else {
                    //Si se aclaro el precio maximo, se hace una consulta BEETWEN
                    //si se aclaro la ciudad se incluye la ciudad en la consulta  
                    //CONSULTA BEETWEN Y CIUDAD
                    String SQL = "SELECT * \n"
                            + "FROM alojamiento JOIN ciudad ON alojamiento.idCiudadDestino = ciudad.idCiudad\n"
                            + "WHERE alojamiento.importeDiario BETWEEN ? AND ? AND alojamiento.estado = ? AND ciudad.nombre = ?";
                    statement = con.prepareStatement(SQL);

                    //establezco el statement con el precio minimo y Maximo:
                    if (jTFPrecioMinimo.getText().equals("")) {
                        //si no hay precio minimo, se establece en 0.
                        statement.setDouble(1, 0.0);
                    } else {
                        //si hay precio minimo, se lo toma del textfield.
                        statement.setDouble(1, Double.parseDouble(jTFPrecioMinimo.getText()));
                    }
                    //se establece el precio maximo.
                    statement.setDouble(2, Double.parseDouble(jTFPrecioMaximo.getText()));
                    //establezco el estado activo/inactivo con el radiobuton.
                    statement.setBoolean(3, jRFiltroEstado.isSelected());
                    //establezco la ciudad con el textfield.
                    statement.setString(4, jTCiudadBuscar.getText());
                    //se ejecuta la consulta
                    resultado = statement.executeQuery();
                }
            }
            //****La consulta ya se realizo****
            //limpio la tabla:
            limpiarTabla();
            //añado a la tabla los resultados de la consulta 
            while (resultado.next()) {
                //si el estado es true cambiarlo a disponible:
                if (resultado.getBoolean("estado") == true) {
                    modelo.addRow(new Object[]{resultado.getInt("idAlojamiento"), resultado.getDate("fechaIn"), resultado.getDate("fechaOn"),
                        "Disponible", resultado.getString("tipo"), resultado.getString("servicio"), resultado.getInt("importeDiario"), resultado.getString("ciudad.nombre")});
                } else {
                    //si el estado es false, cambiarlo a no disponible
                    modelo.addRow(new Object[]{resultado.getInt("idAlojamiento"), resultado.getDate("fechaIn"), resultado.getDate("fechaOn"),
                        "No Disponible", resultado.getString("tipo"), resultado.getString("servicio"), resultado.getInt("importeDiario"), resultado.getString("ciudad.nombre")});
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(rootPane, "Error al mandar la consulta a la base de datos " + e);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(rootPane, "Ingrese un valor minimo y/o maximo valido " + e);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "a ocurrido un error " + e);

        } finally {
            if (resultado != null) {
                try {
                    resultado.close();
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(rootPane, "error al cerrar el resulset " + ex);
                }
            }
            if (statement != null) {
                try {
                    statement.close();
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(rootPane, "error al cerrar el statement " + ex);
                }
            }
        }
    }//GEN-LAST:event_jBFiltrarTablaActionPerformed

    private void jLBusquedaAyudaMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLBusquedaAyudaMouseEntered
        // se coloca el mouse sobre el icono ?
        jLBusquedaAyuda.setToolTipText("Ingrese un ID para buscar y modificar la base de datos, no influye a la hora de insertar un Alojamiento");
    }//GEN-LAST:event_jLBusquedaAyudaMouseEntered

    private void jTCiudadBuscarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTCiudadBuscarMouseClicked
        // clic en jtextfieldCiudadBuscar
        jTCiudadBuscar.setText("");        
    }//GEN-LAST:event_jTCiudadBuscarMouseClicked


          
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBBorrar;
    private javax.swing.JButton jBBuscar;
    private javax.swing.JButton jBFechaIngreso;
    private javax.swing.JButton jBFiltrarTabla;
    private javax.swing.JButton jBGuardar;
    private javax.swing.JButton jBLimpíar;
    private javax.swing.JButton jBNuevo;
    private javax.swing.JButton jBfechaEgreso;
    private javax.swing.JComboBox<Ciudad> jCBCiudades;
    private com.toedter.calendar.JCalendar jCalendar;
    private javax.swing.JLabel jLAyuda;
    private javax.swing.JLabel jLBusquedaAyuda;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton jREstado;
    private javax.swing.JRadioButton jRFiltroEstado;
    private javax.swing.JLabel jSalir;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTAlojamientos;
    private javax.swing.JTextField jTCiudadBuscar;
    private javax.swing.JTextField jTFPrecioMaximo;
    private javax.swing.JTextField jTFPrecioMinimo;
    private javax.swing.JTextField jTFechaEgreso;
    private javax.swing.JTextField jTFechaIngreso;
    private javax.swing.JTextField jTIDbuscar;
    private javax.swing.JTextField jTImporte;
    private javax.swing.JTextField jTServicios;
    private javax.swing.JTextField jTTipo;
    // End of variables declaration//GEN-END:variables
//quitar barra superior
 private JComponent Barra = ((javax.swing.plaf.basic.BasicInternalFrameUI) getUI()).getNorthPane();
private Dimension DimensionBarra = null;

public void QuitarLaBarraTitulo()
    {
        Barra = ((javax.swing.plaf.basic.BasicInternalFrameUI) getUI()).getNorthPane();
        DimensionBarra = Barra.getPreferredSize();
        Barra.setSize(0, 0);
        Barra.setPreferredSize(new Dimension(0, 0));
        repaint();
    }

    private void cargarCiudadesJCB() throws SQLException {
        //primero se hace una consulta con todas las ciudades activas
        PreparedStatement statement = null;
        ResultSet resultado = null;

        try {
            String SQL = "SELECT* FROM ciudad WHERE estado=1";
            statement = con.prepareStatement(SQL);
            resultado = statement.executeQuery();
            //recorro la tabla resultante de la consulta y la añado al jcbox
            while (resultado.next()) {
                jCBCiudades.addItem(new Ciudad(resultado.getInt("idCiudad"), resultado.getString("nombre"), resultado.getString("pais"), true, resultado.getString("provincia")));
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(rootPane, "error al cargar las ciudades al combo box " + e);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "error al cargar las ciudades al combo box " + e);
        } //luego del try catch, cierro el resulset y el statement
        finally {
            if (resultado != null) {
                try {
                    resultado.close();
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(rootPane, "error al cerrar el resulset " + ex);
                }
            }
            if (statement != null) {
                try {
                    statement.close();
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(rootPane, "error al cerrar el statement " + ex);
                }
            }
        }
    }

private void cargarCabeceraTabla(){
   modelo.addColumn("id Aloj");
   modelo.addColumn("Fecha Ingreso");
   modelo.addColumn("Fecha Salida");
   modelo.addColumn("Estado");
   modelo.addColumn("Tipo");
   modelo.addColumn("Servicio");
   modelo.addColumn("Importe Diario");
   modelo.addColumn("Ciudad Destino"); 
   jTAlojamientos.setModel(modelo);   
}

private void cambiarAnchoColumnas()
{      
    TableColumn id = jTAlojamientos.getColumnModel().getColumn(0);
    id.setPreferredWidth(30);
    id.setMaxWidth(40);
    TableColumn fechain = jTAlojamientos.getColumnModel().getColumn(1);
    fechain.setPreferredWidth(30);
    TableColumn fechaon = jTAlojamientos.getColumnModel().getColumn(2);
    fechaon.setPreferredWidth(30);
    TableColumn estado = jTAlojamientos.getColumnModel().getColumn(3);
    estado.setPreferredWidth(20);
    TableColumn tipo = jTAlojamientos.getColumnModel().getColumn(4);
    tipo.setPreferredWidth(70);
    TableColumn serv = jTAlojamientos.getColumnModel().getColumn(5);
    serv.setPreferredWidth(120);
    TableColumn importe = jTAlojamientos.getColumnModel().getColumn(6);
    importe.setPreferredWidth(35);
    TableColumn ciudad = jTAlojamientos.getColumnModel().getColumn(7);
    ciudad.setPreferredWidth(100);      
}
private void cargarAlojamientosTabla(){
    PreparedStatement statement = null;
    ResultSet resultado = null;

    try {  //preparo la consulta
        String SQL = "SELECT * \n"
                + "FROM alojamiento JOIN ciudad ON alojamiento.idCiudadDestino = ciudad.idCiudad\n"
                + "WHERE alojamiento.estado=1";
        statement = con.prepareStatement(SQL);
        //se ejecuta la consulta
        resultado = statement.executeQuery();
        while (resultado.next()) {
            //añado a la tabla los resultados de la consulta 
            //si el estado es true cambiarlo a disponible:
            if (resultado.getBoolean("estado") == true) {
                modelo.addRow(new Object[]{resultado.getInt("idAlojamiento"), resultado.getDate("fechaIn"), resultado.getDate("fechaOn"),
                    "Disponible", resultado.getString("tipo"), resultado.getString("servicio"), resultado.getInt("importeDiario"), resultado.getString("ciudad.nombre")});
            } else {
                //si el estado es false, cambiarlo a no disponible
                modelo.addRow(new Object[]{resultado.getInt("idAlojamiento"), resultado.getDate("fechaIn"), resultado.getDate("fechaOn"),
                    "No Disponible", resultado.getString("tipo"), resultado.getString("servicio"), resultado.getInt("importeDiario"), resultado.getString("ciudad.nombre")});
            }
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(rootPane, "error al acceder a los datos sobre los alojamientos "+e);
    } catch (Exception e) {
        JOptionPane.showMessageDialog(rootPane, "error al cargar la tabla de alojamientos "+e);
    } finally {
        if (resultado != null) {
            try {
                resultado.close();
            } catch (SQLException ex) {
               JOptionPane.showMessageDialog(rootPane, "error al cerrar el resulset "+ex);
            }
        }
        if (statement != null) {
            try {
                statement.close();
            } catch (SQLException ex) {
                 JOptionPane.showMessageDialog(rootPane, "error al cerrar el statement "+ex);
            }
        }
    }  
}

    private void updateAlojamiento(boolean estado) {
        // el boton guardar y borrar llaman a este metodo para modificar el alojamiento    
        //el metodo comprobar datos se llama con un boolean true para que este compruebe el id.
        //y devuelve true si todos los datos son validos, false de no serlos.
        if (comprobarDatos(true)) {
            //declaro el statement nulo.
            PreparedStatement statement = null;

            String sql = "UPDATE alojamiento SET fechaIn = ?, fechaOn = ?,estado = ?,tipo = ?, servicio = ?, importeDiario= ?"
                    + ",idCiudadDestino = ? WHERE idAlojamiento = ?";
            try {
                statement = con.prepareStatement(sql);
                // preparo la sentencia tomando los valores ingresados por el usuario  
                //convierto el String del textfield que tiene una fecha a un Date
                Date fechain = new SimpleDateFormat("yyyy-MM-dd").parse(jTFechaIngreso.getText());
                Date fechasa = new SimpleDateFormat("yyyy-MM-dd").parse(jTFechaEgreso.getText());
                java.sql.Date sqlfecha1 = new java.sql.Date(fechain.getTime());
                java.sql.Date sqlfecha2 = new java.sql.Date(fechasa.getTime());
                statement.setDate(1, sqlfecha1);
                statement.setDate(2, sqlfecha2);
                statement.setBoolean(3, estado);
                statement.setString(4, jTTipo.getText());
                statement.setString(5, jTServicios.getText());
                //convierto el string del jtextfield en int
                statement.setInt(6, Integer.parseInt(jTImporte.getText()));
                //el objeto selecciona en el jcombobox  lo casteo a la clase ciudad.
                Ciudad city = (Ciudad) jCBCiudades.getSelectedItem();
                statement.setInt(7, city.getIdCiudad());
                statement.setInt(8, Integer.parseInt(jTIDbuscar.getText()));
                //se manda el insert a la base de datos   
                statement.executeUpdate();
                JOptionPane.showMessageDialog(rootPane, "Se guardo la modificacion en la base de datos");
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(rootPane, "Error al mandar la consulta a la base de datos "+e);
                   } catch (ParseException e) {
                JOptionPane.showMessageDialog(rootPane, "ocurrio un error al convertir los datos "+e);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(rootPane, "ha ocurrido un error "+e);
            } finally {
                if (statement != null) {
                    try {
                        statement.close();
                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(rootPane, "error al cerrar el statement " + ex);
                    }
                }
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Complete todos los campos con datos validos");
        }
    }

private void limpiarTabla(){
        //llamo a este metodo cada vez que quiero limpiar la tabla.
        int filas = modelo.getRowCount() - 1;
        for (; filas >= 0; filas--) {
            modelo.removeRow(modelo.getRowCount() - 1);
        }
    }

    private boolean comprobarDatos(boolean id) {
        //este metodo comprueba que todos los datos del alojamiento sean
        //validos para subirlo a la base de datos.
        //retornara true si son validos, false si uno no es valido.

        boolean retorno = true;

        //se llama al metodo con un true para corroborar el id, y con un false para no corroborarlo.
        if (id == true) {
            //si el id es nulo, o si no contiene solo numeros, devuelve false
            //.matches compara si un String contiene solo digitos o no devolviendo un booleano.
            if (jTIDbuscar.getText().isEmpty() || jTIDbuscar.getText().matches("\\d+") != true) {
                retorno = false;
            }
        }
        //se llamo al metodo con un false entonces no se corrobora el ID
        if (jTTipo.getText().isEmpty()) {
            retorno = false;
        } else {
            for (char c : jTTipo.getText().toCharArray()) {
                if (Character.isDigit(c)) {
                    retorno = false;
                    break;
                }
            }
            if (jTServicios.getText().isEmpty()) {
                retorno = false;
            } else {               
                if (jTImporte.getText().isEmpty() || jTImporte.getText().matches("\\d+") != true) {
                    retorno = false;
                } else {
                    if (jCBCiudades.getSelectedItem() == null) {
                        retorno = false;
                    } else {
                        if (jTFechaIngreso.getText().isEmpty() || jTFechaEgreso.getText().isEmpty()) {
                            retorno = false;
                        }
                    }
                }
            }
        }
        return retorno;
    }

    private void insertarAlojamiento() {
        // crear nuevo Alojamiento
        //el metodo comprobar datos se llama con un boolean false para que este no compruebe el id.
        //y devuelve true si todos los datos son validos, false de no serlos.

        if (comprobarDatos(false)) {
            PreparedStatement statement = null;

            String sql = "INSERT INTO alojamiento  (fechaIn, fechaOn, estado, tipo, servicio, importeDiario, idCiudadDestino) VALUES (?,?,?,?,?,?,?)";
            try {
                statement = con.prepareStatement(sql);
                // preparo la sentencia tomando los valores ingresados por el usuario
                //convierto el String del textfield que tiene una fecha a un Date
                Date fechain = new SimpleDateFormat("yyyy-MM-dd").parse(jTFechaIngreso.getText());
                Date fechasa = new SimpleDateFormat("yyyy-MM-dd").parse(jTFechaEgreso.getText());
                java.sql.Date sqlfecha1 = new java.sql.Date(fechain.getTime());
                java.sql.Date sqlfecha2 = new java.sql.Date(fechasa.getTime());
                statement.setDate(1, sqlfecha1);
                statement.setDate(2, sqlfecha2);
                statement.setBoolean(3, jREstado.isSelected());
                statement.setString(4, jTTipo.getText());
                statement.setString(5, jTServicios.getText());
                //convierto el string del jtextfield en int
                statement.setInt(6, Integer.parseInt(jTImporte.getText()));
                //el objeto selecciona en el jcombobox  lo casteo a la clase ciudad.
                Ciudad city = (Ciudad) jCBCiudades.getSelectedItem();
                statement.setInt(7, city.getIdCiudad());
                //se manda el insert a la base de datos
                statement.executeUpdate();
                JOptionPane.showMessageDialog(rootPane, "Se inserto un alojamiento en la base de datos");
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(rootPane, "Error en la conexion con la base de datos "+e);
            } catch (ParseException e) {
                JOptionPane.showMessageDialog(rootPane, "ocurrio un error al convertir los datos "+e);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(rootPane, "ha ocurrido un error "+e);
            } finally {
                if (statement != null) {
                    try {
                        statement.close();
                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(rootPane, "error al cerrar el statement " + ex);
                    }
                }
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Complete todos los campos con datos validos ");
        }
    }
}



